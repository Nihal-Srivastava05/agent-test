"""
Generated test for agents_sample.

This test was automatically generated by AgentTest.
"""

from agents_sample import *

from agent_test import agent_test


@agent_test(
    criteria=["correctness", "type_validation", "default_values"],
    tags=["basic", "edge_case"],
)
def test_customer_query_creation():
    """Tests the creation of a CustomerQuery object with different parameters."""
    input_data = {
        "category": "shipping",
        "customer_type": "premium",
        "query": "My order hasn\u0027t arrived yet.",
        "urgency": "high",
    }
    expected_behavior = (
        "A CustomerQuery object should be created with the specified attributes."
    )
    # Call the function being tested
    # Function call
    actual = CustomerQuery(**input_data)

    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {
            "correctness": "The created object should have the correct attribute values.",
            "default_values": "If customer_type, urgency, or category are not provided, they should default to \u0027regular\u0027, \u0027normal\u0027, and None respectively.",
            "type_validation": "The attributes should be of the correct data type (str).",
        },
    }


@agent_test(
    criteria=["accuracy", "case_insensitivity", "keyword_matching"], tags=["basic"]
)
def test_classify_query_billing():
    """Tests the classify_query method with a billing-related query."""
    input_data = {"query": "I have a question about my bill. I was charged twice."}
    expected_behavior = "The method should return \u0027billing\u0027."
    # Call the function being tested
    # Function call
    actual = classify_query(**input_data)

    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {
            "accuracy": "The classification should be accurate based on the query content.",
            "case_insensitivity": "The classification should be case-insensitive.",
            "keyword_matching": "The classification should correctly identify keywords related to billing.",
        },
    }


@agent_test(
    criteria=["robustness", "default_behavior", "error_handling"],
    tags=["edge_case", "error_handling"],
)
def test_classify_query_empty():
    """Tests the classify_query method with an empty query string."""
    input_data = {"query": ""}
    expected_behavior = "The method should return None or a default category (e.g., \u0027unknown\u0027)."
    # Call the function being tested
    # Function call
    actual = classify_query(**input_data)

    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {
            "default_behavior": "The method should return a sensible default value when the query is empty.",
            "error_handling": "No exceptions should be raised.",
            "robustness": "The method should handle empty input gracefully without errors.",
        },
    }


@agent_test(
    criteria=["accuracy", "keyword_matching", "context_awareness"], tags=["basic"]
)
def test_classify_query_technical():
    """Tests the classify_query method with a technical issue query."""
    input_data = {
        "query": "The application is crashing repeatedly. I get an error message."
    }
    expected_behavior = "The method should return \u0027technical\u0027."
    # Call the function being tested
    # Function call
    actual = classify_query(**input_data)

    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {
            "accuracy": "The classification should be accurate based on the query content.",
            "context_awareness": "The classification should consider the context of the query.",
            "keyword_matching": "The classification should correctly identify keywords related to technical issues.",
        },
    }


@agent_test(
    criteria=["performance", "accuracy", "robustness", "category_resolution"],
    tags=["performance", "edge_case"],
)
def test_classify_query_long_query():
    """Tests the classify_query method with a very long query string."""
    input_data = {
        "query": "This is a very long query string that contains multiple keywords related to different categories such as billing, technical issues, and account problems. I am having trouble logging in and also my bill seems incorrect. The application also crashes sometimes. I need help with all of these issues. Please provide assistance as soon as possible. I have been a loyal customer for many years and I expect a prompt response. Thank you for your time and attention to this matter. I hope to hear from you soon. I am available to answer any questions you may have. Please let me know if you need any further information from me. I am looking forward to your reply. Thank you again."
    }
    expected_behavior = "The method should correctly classify the query based on the dominant category or return a \u0027multiple\u0027 or \u0027complex\u0027 category."
    # Call the function being tested
    # Function call
    actual = classify_query(**input_data)

    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {
            "accuracy": "The classification should be accurate despite the length and complexity of the query.",
            "category_resolution": "The method should resolve the query to the most relevant category or a combined category if multiple are present.",
            "performance": "The method should handle long input without significant performance degradation.",
            "robustness": "The method should not crash or raise exceptions due to the long input.",
        },
    }
