"""
Generated test for agents_sample.

This test was automatically generated by AgentTest.
"""

from agent_test import agent_test

# TODO: Import your agent functions here
# from your_module import your_function

from examples.agents_sample import CustomerQuery


@agent_test(
    criteria=["correctness", "data_type", "default_values"],
    tags=["basic"]
)
def test_customer_query_creation():
    """Tests the creation of a CustomerQuery object with different parameters."""
    input_data = {"category": "shipping", "customer_type": "premium", "query": "My order hasn\u0027t arrived yet.", "urgency": "high"}
    expected_behavior = "A CustomerQuery object should be created with the specified attributes."
    
    # Call the function being tested
    actual = CustomerQuery(**input_data)
    
    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {"correctness": "All attributes of the created object should match the input data.", "data_type": "Attributes should be of the correct data type (str).", "default_values": "If optional parameters are not provided, they should default to the correct values."}
    }


@agent_test(
    criteria=["accuracy", "case_insensitivity", "keyword_matching"],
    tags=["basic"]
)
def test_classify_query_billing():
    """Tests the classify_query method with a billing-related query."""
    input_data = {"query": "I have a question about my bill.", "self": "CustomerSupportAgent instance (requires API key)"}
    expected_behavior = "The method should return \u0027billing\u0027."
    
    # Call the function being tested
    actual = classify_query(**input_data)
    
    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {"accuracy": "The classification should be accurate based on the query content.", "case_insensitivity": "The classification should be case-insensitive.", "keyword_matching": "The classification should correctly identify keywords related to billing."}
    }


@agent_test(
    criteria=["error_handling", "return_value", "no_exception"],
    tags=["edge_case", "error_handling"]
)
def test_classify_query_empty_query():
    """Tests the classify_query method with an empty query string."""
    input_data = {"query": "", "self": "CustomerSupportAgent instance (requires API key)"}
    expected_behavior = "The method should not raise an error and should return None or a default category (e.g., \u0027unknown\u0027)."
    
    # Call the function being tested
    actual = classify_query(**input_data)
    
    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {"error_handling": "The method should handle the empty query gracefully without crashing.", "no_exception": "No exceptions should be raised.", "return_value": "The method should return a valid category or None."}
    }


@agent_test(
    criteria=["accuracy", "performance", "resource_usage"],
    tags=["performance"]
)
def test_classify_query_long_query():
    """Tests the classify_query method with a very long query string to check for performance issues."""
    input_data = {"query": "This is a very long query string that contains a lot of irrelevant information. I am having trouble with my account and I can\u0027t login. My password is not working and I need help accessing my account. I have tried everything and nothing seems to be working. Please help me with my account access issues. This is a very long query string that contains a lot of irrelevant information. I am having trouble with my account and I can\u0027t login. My password is not working and I need help accessing my account. I have tried everything and nothing seems to be working. Please help me with my account access issues.", "self": "CustomerSupportAgent instance (requires API key)"}
    expected_behavior = "The method should correctly classify the query as \u0027account\u0027 despite its length."
    
    # Call the function being tested
    actual = classify_query(**input_data)
    
    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {"accuracy": "The classification should be accurate despite the length of the query.", "performance": "The method should not take an excessively long time to process the query.", "resource_usage": "The method should not consume excessive memory or CPU resources."}
    }


@agent_test(
    criteria=["accuracy", "completeness", "robustness"],
    tags=["edge_case"]
)
def test_classify_query_no_keywords():
    """Tests the classify_query method with a query that contains none of the predefined keywords."""
    input_data = {"query": "I want to know more about the weather today.", "self": "CustomerSupportAgent instance (requires API key)"}
    expected_behavior = "The method should return None or a default category (e.g., \u0027unknown\u0027)."
    
    # Call the function being tested
    actual = classify_query(**input_data)
    
    return {
        "input": input_data,
        "expected_behavior": expected_behavior,
        "actual": actual,
        "evaluation_criteria": {"accuracy": "The classification should return None or \u0027unknown\u0027 as no keywords are present.", "completeness": "The method should not misclassify the query into an incorrect category.", "robustness": "The method should handle queries without keywords gracefully."}
    }

